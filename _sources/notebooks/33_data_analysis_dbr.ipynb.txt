{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data analysis DBR\n",
    "\n",
    "We analyze the following DBR samples from the edx course\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "2"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import ubcpdk\n",
    "from ubcpdk.data.dbr import dbrs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "3"
    }
   },
   "outputs": [],
   "source": [
    "w, p = ubcpdk.data.read_mat(dbrs[\"1_10\"], 1)\n",
    "plt.plot(w * 1e9, p)\n",
    "plt.xlim([1530, 1600])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for key in dbrs.keys():\n",
    "    w, p = ubcpdk.data.read_mat(dbrs[key], 1)\n",
    "    # plt.figure()\n",
    "    # plt.title(key)\n",
    "    plt.plot(w * 1e9, p, label=key)\n",
    "    plt.xlim([1530, 1600])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from ubcpdk import data\n",
    "from ubcpdk.data.dbr import dbrs\n",
    "\n",
    "r1_names = [f\"1_{i}\" for i in list(range(1, 12, 2))]\n",
    "r1_dw = [5, 10, 20, 40, 60, 80]\n",
    "s1_names = [f\"1_{i}\" for i in list(range(2, 12, 2))]\n",
    "s1_dw = [200, 180, 160, 140, 120]\n",
    "\n",
    "r2_names = [f\"2_{i}\" for i in list(range(13, 24, 2))]\n",
    "r2_dw = [100, 120, 140, 160, 180, 200]\n",
    "s2_names = [f\"2_{i}\" for i in list(range(12, 25, 2))]\n",
    "s2_dw = [100, 80, 60, 40, 20, 10, 5]\n",
    "\n",
    "r4_names = [f\"4_{i}\" for i in list(range(1, 25, 2))]\n",
    "r4_dw = list(range(20, 32))\n",
    "s4_names = [f\"4_{i}\" for i in list(range(2, 25, 2))]\n",
    "s4_dw = list(range(31, 19, -1))\n",
    "\n",
    "\n",
    "def find_banwidths(names, dw, title=None):\n",
    "    bw = np.zeros_like(names, dtype=float)\n",
    "    for i, key in enumerate(names):\n",
    "        w, p = data.read_mat(dbrs[key], port=1)\n",
    "        wc, pc = data.chop(w, p, ymin=-60)\n",
    "        pw = data.windowed_mean(pc)\n",
    "        bw[i] = data.find_bandwidth(wc, pw)\n",
    "\n",
    "    plt.plot(dw, bw * 1e9, \".-\")\n",
    "    plt.xlabel(\"dw (nm)\")\n",
    "    plt.ylabel(\"bandwidth (nm)\")\n",
    "    if title:\n",
    "        plt.title(title)\n",
    "\n",
    "\n",
    "bw = find_banwidths(r1_names, r1_dw, title=\"rectangular DBR\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bw = find_banwidths(r1_names, r1_dw, title=\"rectangular DBR\")\n",
    "bw = find_banwidths(r2_names, r2_dw, title=\"rectangular DBR\")\n",
    "bw = find_banwidths(r4_names, r4_dw, title=\"rectangular DBR\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bw = find_banwidths(s1_names, s1_dw, title=\"sinusoidal DBR\")\n",
    "bw = find_banwidths(s2_names, s2_dw, title=\"sinusoidal DBR\")\n",
    "bw = find_banwidths(s4_names, s4_dw, title=\"sinusoidal DBR\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
