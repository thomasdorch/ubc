{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data analysis MZI\n",
    "\n",
    "We analyze the following MZI samples from the edx course\n",
    "\n",
    "MZI1:\n",
    "dL_wg=0\n",
    "\n",
    "MZI2:\n",
    "r=5\n",
    "dL_path = (208.40000 - 148.15000) * 2\n",
    "dL_wg = dL_path + 2*pi*r - 4*2*r\n",
    "= 111.915\n",
    "\n",
    "MZI3:\n",
    "r=5\n",
    "dL_path = (259.55000-148.15000) * 2\n",
    "dL_wg = dL_path + 2*pi*r - 4*2*r ; dL_wg\n",
    "= 214.215\n",
    "\n",
    "MZI4:\n",
    "r1 = 435.90000-427.60000; r1\n",
    "r2 = 10\n",
    "dL_path = (259.55000-148.15000) * 2\n",
    "dL_wg = dL_path + pi*(r1+r2) - 4*(r1+r2) ; dL_wg\n",
    "= 207.08945\n",
    "\n",
    "MZI5:\n",
    "r1 = 556.35000-547.60000; r1\n",
    "r2 = 10\n",
    "dL_path = (259.55000-148.15000) * 2\n",
    "dL_wg = dL_path + pi*(r1+r2) - 4*(r1+r2) ; dL_wg\n",
    "= 206.703125\n",
    "\n",
    "MZI6:\n",
    "r=4\n",
    "dL_path = (259.55000-148.15000) * 2\n",
    "dL_wg = dL_path + 2*pi*r - 4*2*r ; dL_wg\n",
    "= 215.932\n",
    "\n",
    "MZI8:\n",
    "r=3\n",
    "dL_path = (259.55000-148.15000) * 2\n",
    "dL_wg = dL_path + 2*pi*r - 4*2*r ; dL_wg\n",
    "= 217.649\n",
    "\n",
    "MZI17:\n",
    "r=2\n",
    "dL_path = (259.55000-148.15000) * 2\n",
    "dL_wg = dL_path + 2*pi*r - 4*2*r ; dL_wg\n",
    "= 219.366"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import ubcpdk\n",
    "import ubcpdk.simulation.circuits_simphony as cm\n",
    "from ubcpdk.simulation.circuits.mzi_spectrum import mzi_spectrum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w, p = ubcpdk.data.read_mat(ubcpdk.PATH.mzi1, port=0)\n",
    "plt.plot(w, p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For some reason this MZI has an interference pattern. This is strange because the lengths of both arms are the same. This means that there was a strong height variation on the chip."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w, p = ubcpdk.data.read_mat(ubcpdk.PATH.mzi3, port=0)\n",
    "plt.plot(w, p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wr = np.linspace(1520, 1580, 1200) * 1e-3\n",
    "pr = mzi_spectrum(L1_um=0, L2_um=214.215, wavelength_um=wr)\n",
    "plt.plot(wr * 1e3, 10 * np.log10(pr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w, p = ubcpdk.data.read_mat(ubcpdk.PATH.mzi3, port=0)\n",
    "pb = ubcpdk.data.remove_baseline(w, p)\n",
    "plt.plot(w, pb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(w, pb, label=\"measurement\")\n",
    "plt.plot(wr * 1e3, 10 * np.log10(pr), label=\"analytical\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ms.sweep_wavelength?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.optimize import curve_fit\n",
    "\n",
    "L1_um = 40\n",
    "L2_um = L1_um + 215.932\n",
    "\n",
    "\n",
    "def mzi_logscale(wavelength_um, alpha, n1, n2, n3):\n",
    "    return 10 * np.log10(\n",
    "        mzi_spectrum(\n",
    "            L1_um=L1_um,\n",
    "            L2_um=L2_um,\n",
    "            wavelength_um=wavelength_um,\n",
    "            alpha=alpha,\n",
    "            n1=n1,\n",
    "            n2=n2,\n",
    "            n3=n3,\n",
    "        )\n",
    "    )\n",
    "\n",
    "\n",
    "w, p = ubcpdk.data.read_mat(ubcpdk.PATH.mzi6, port=0)\n",
    "wum = w * 1e-3\n",
    "pb = ubcpdk.data.remove_baseline(w, p)\n",
    "\n",
    "p0 = [1e-3, 2.4, -1, 0]\n",
    "plt.plot(w, pb, label=\"data\")\n",
    "plt.plot(w, mzi_logscale(wum, *p0), label=\"initial condition\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "params, params_covariance = curve_fit(mzi_logscale, wum, pb, p0=[1e-3, 2.4, -1, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(w, pb, label=\"data\")\n",
    "plt.plot(w, mzi_logscale(wum, *params), label=\"fit\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "L1_um = 40\n",
    "L2_um = L1_um + 215.932\n",
    "\n",
    "\n",
    "def mzi(wavelength_um, alpha, n1, n2, n3):\n",
    "    return mzi_spectrum(\n",
    "        L1_um=L1_um,\n",
    "        L2_um=L2_um,\n",
    "        wavelength_um=wavelength_um,\n",
    "        alpha=alpha,\n",
    "        n1=n1,\n",
    "        n2=n2,\n",
    "        n3=n3,\n",
    "    )\n",
    "\n",
    "\n",
    "w, p = ubcpdk.data.read_mat(ubcpdk.PATH.mzi6, port=0)\n",
    "wum = w * 1e-3\n",
    "pb = ubcpdk.data.remove_baseline(w, p)\n",
    "pb_linear = 10 ** (pb / 10)\n",
    "\n",
    "p0 = [1e-3, 2.4, -1, 0]\n",
    "plt.plot(w, pb_linear, label=\"data\")\n",
    "plt.plot(w, mzi(wum, *p0), label=\"initial condition\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "params, params_covariance = curve_fit(mzi, wum, pb, p0=p0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(w, pb_linear, label=\"data\")\n",
    "plt.plot(w, mzi(wum, *params), label=\"fit\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
